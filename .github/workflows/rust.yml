name: "cargo"
on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  CARGO_TERM_COLOR: always
jobs:
  bindgen:
    defaults:
      run:
        shell: nu {0}
    strategy:
      matrix:
        os: [windows-11-preview_aarch64, windows-2025]
        target: [aarch64-pc-windows-msvc, x86_64-pc-windows-msvc, i686-pc-windows-msvc]
        exclude:
          - os: windows-11-preview_aarch64
            target: x86_64-pc-windows-msvc
          - os: windows-11-preview_aarch64
            target: i686-pc-windows-msvc
          - os: windows-2025
            target: aarch64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
    - if: matrix.os != 'windows-11-preview_aarch64'
      uses: hustcer/setup-nu@main
      with:
        version: '*'
    - if: matrix.os == 'windows-11-preview_aarch64'
      uses: robinraju/release-downloader@v1
      with:
        repository: 'git-for-windows/git'
        tag: 'v2.48.0-rc1.windows.1'
        filename: 'Git-2.48.0-rc1-arm64.exe'
    - if: matrix.os == 'windows-11-preview_aarch64'
      uses: robinraju/release-downloader@v1
      with:
        repository: 'llvm/llvm-project'
        tag: 'llvmorg-19.1.5'
        filename: 'LLVM-19.1.5-woa64.exe'
    - if: matrix.os == 'windows-11-preview_aarch64'
      uses: robinraju/release-downloader@v1
      with:
        repository: 'nushell/nushell'
        tag: '0.101.0'
        filename: 'nu-0.101.0-aarch64-pc-windows-msvc.msi'
    - name: Install nushell (aarch64)
      if: matrix.os == 'windows-11-preview_aarch64'
      shell: powershell
      run: |
        msiexec /i "$env:RUNNER_TEMP/nu-0.101.0-aarch64-pc-windows-msvc.msi" -ArgumentList "/quiet" -NoNewWindow -Wait
        nu --version
        echo "NuShell 0.101.0 installed successfully."
    - name: Install Build Tools (aarch64)
      if: matrix.os == 'windows-11-preview_aarch64'
      run: |
        # Download Chocolatey installer via HTTP
        # let choco_installer_url = "https://community.chocolatey.org/api/v2/package/chocolatey/"
        # let choco_installer = $"($env.RUNNER_TEMP)\chocolatey.nupkg"
        # http get $choco_installer_url | save $choco_installer

        # Extract and install Chocolatey using Nushell's package management commands
        # unzip $choco_installer -d "C:\ProgramData\chocolatey"
        # $env.GITHUB_PATH = $"($env.GITHUB_PATH);C:\ProgramData\chocolatey\bin"

        # Use Chocolatey to install Visual Studio Build Tools
        choco install visualstudio2022buildtools -y --no-progress --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.ARM64 --add Microsoft.VisualStudio.Component.Windows11SDK.22621"
        echo "Visual Studio 2022 Build Tools (aarch64) installation completed."
        run $"($env.RUNNER_TEMP)/LLVM-19.1.5-woa64.exe" /S
        echo "LLVM 19.1.5 (aarch64) installation completed."

        run $"($env.RUNNER_TEMP)/Git-2.48.0-rc1-arm64.exe" /VERYSILENT
        $env.GITHUB_PATH = $"($env.GITHUB_PATH);;C:\Program Files\Git\cmd;C:\Program Files\Git\bin"
        echo "Git 2.48.0-rc1 (aarch64) installation completed."
        
        http get "https://win.rustup.rs/aarch64" | save $"($env.RUNNER_TEMP)/rustup-init.exe"
        run $"($env.RUNNER_TEMP)/rustup-init.exe" --default-host aarch64-pc-windows-msvc --default-toolchain nightly -y
        echo "Rust (nightly, aarch64) installation completed."

    - name: Install Rust
      if: matrix.os != 'windows-11-preview_aarch64'
      uses: dtolnay/rust-toolchain@nightly
      with:
        targets: ${{ matrix.target }}
        components: rustfmt
        
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run tests and generate bindings
      run: |
        $env.PHNT_VERSION = 'PHNT_WIN11_24H2'
        $env.PHNT_MODE = 'PHNT_MODE_USER'
        cargo test --release -vv -F regenerate --target ${{ matrix.target }}
        
    - name: Extract architecture from target triple and move bindings
      run: |
        let $arch = "${{ matrix.target }}" | split row '-' | first;
        let $arch = if $arch == 'i686' { 'x86' } else { $arch };
        $env.ARCH = $arch;

        let $output = ls target/${{ matrix.target }}/release/build
          | where name ends-with "${{ env.ARCH }}_bindgen.rs"
          | first?;
        
        if $output { 
          cp $output "src/ffi/${{ env.ARCH }}_bindgen.rs"
          echo "Moved $($output) to src/ffi/${{ env.ARCH }}_bindgen.rs"
        } else {
          echo "Error: Generated binding file not found for ${{ env.ARCH }}." | error
        }

    - name: Upload generated file as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARCH }}_bindgen.rs
        path: src/ffi/${{ env.ARCH }}_bindgen.rs
        
  commit-and-push:
    runs-on: ubuntu-latest
    needs: bindgen
    if: success() # Run only if the generate-bindgen job succeeds
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Download generated files
        uses: actions/download-artifact@v4
        with:
          pattern: "*bindgen.rs"
          path: src/ffi
          merge-multiple: true
          
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add src/ffi

          # Check if there are any changes to commit
          if git diff --quiet --exit-code --cached; then
            echo "No changes to commit."
          else
            git commit -m "chore: update vendored bindings"
            git push --force
          fi
