name: "cargo"
on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  CARGO_TERM_COLOR: always
jobs:
  bindgen:
    defaults:
      run:
        shell: powershell
    strategy:
      matrix:
        os: [windows-11-preview_aarch64, windows-2025]
        target: [aarch64-pc-windows-msvc, x86_64-pc-windows-msvc, i686-pc-windows-msvc]
        exclude:
          - os: windows-11-preview_aarch64
            target: x86_64-pc-windows-msvc
          - os: windows-11-preview_aarch64
            target: i686-pc-windows-msvc
          - os: windows-2025
            target: aarch64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
    - if: matrix.os != 'windows-11-preview_aarch64'
      uses: hustcer/setup-nu@main
      with:
        version: '*'
    - if: matrix.os == 'windows-11-preview_aarch64'
      uses: robinraju/release-downloader@v1
      with:
        repository: 'git-for-windows/git'
        tag: 'v2.48.0-rc1.windows.1'
        filename: 'Git-2.48.0-rc1-arm64.exe'
    - if: matrix.os == 'windows-11-preview_aarch64'
      uses: robinraju/release-downloader@v1
      with:
        repository: 'llvm/llvm-project'
        tag: 'llvmorg-19.1.5'
        filename: 'LLVM-19.1.5-woa64.exe'
    - if: matrix.os == 'windows-11-preview_aarch64'
      uses: robinraju/release-downloader@v1
      with:
        repository: 'microsoft/winget-cli'
        latest: true
        filename: 'Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle'
        out-file-path: 'deps'
    - name: Use nushell
      if: matrix.os == 'windows-11-preview_aarch64'
      run: |
        function Log {
          param(
            [Parameter(Mandatory=$true)] [string]$Message,
            [string]$Level = "INFO"
          )
          Write-Host "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') [$Level] - $Message"
        }
        
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072

        $installs = @(
          # @{ Name = 'Chocolatey'; Action = {
          #     iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')) 2>$null
          # }},
          # @{ Name = 'Visual Studio 2022 Build Tools (aarch64)'; Action = {
          #     choco install visualstudio2022buildtools -y --no-progress --silent --package-parameters '--add Microsoft.VisualStudio.Component.VC.Tools.ARM64 --add Microsoft.VisualStudio.Component.Windows11SDK.22621'
          # }},
          @{ Name = 'Rust (nightly, aarch64)'; Action = {
              Invoke-WebRequest -Uri 'https://win.rustup.rs/aarch64' -OutFile '${{github.workspace}}\rustup-init.exe';
              & '${{github.workspace}}\rustup-init.exe' --default-host aarch64-pc-windows-msvc --default-toolchain nightly -y
          }},
          @{ Name = 'LLVM 19.1.5'; Action = {
            & '${{github.workspace}}\LLVM-19.1.5-woa64.exe' /S
          }},
          @{ Name = 'Git 2.48.0-rc1'; Action = {
            & '${{github.workspace}}\Git-2.48.0-rc1-arm64.exe' /VERYSILENT
          }}
        )
        
        $installs | ForEach-Object {
          Log "Starting installation of $($_.Name)..."
          try {
            & $_.Action 2>$null
            Log "$($_.Name) installation completed."
          } catch {
            Log "Failed to install $($_.Name)."
          }
        }
      
        $exports = @(
          "$env:ProgramFiles\Git\cmd",       # Git
          "$env:ProgramFiles\Git\bin",       # Bash
          "$env:ProgramData\chocolatey\bin", # Chocolatey
          "$env:USERPROFILE\.cargo\bin"      # Rust
        )

        $exports | ForEach-Object  {
          Add-Content -Path $env:GITHUB_PATH -Value $_
          Log "Added $_ to $env:GITHUB_PATH"
        }

    - name: Install Rust
      if: matrix.os != 'windows-11-preview_aarch64'
      uses: dtolnay/rust-toolchain@nightly
      with:
        targets: ${{ matrix.target }}
        components: rustfmt
    
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run tests and generate bindings
      env:
        PHNT_VERSION: PHNT_WIN11_24H2
        PHNT_MODE: PHNT_MODE_USER
      run: |
        cargo test --release -vv -F regenerate --target ${{ matrix.target }}
        
    - name: Extract architecture from target triple and move bindings
      run: |
        $arch = '${{ matrix.target }}' -split '-' | Select-Object -First 1
        $arch = if ($arch -eq 'i686') { 'x86' } else { $arch }
        Add-Content -Path $env:GITHUB_ENV -Value "ARCH=$arch"
        
        $output = Get-ChildItem -Path "target/${{ matrix.target }}/release/build/**/$($arch)_bindgen.rs" -Recurse | Select-Object -First 1
        Copy-Item -Path $output.FullName -Destination "src/ffi/$($arch)_bindgen.rs"
        
        Write-Host "Moved $output to src/ffi/$($arch)_bindgen.rs"

    - name: Upload generated file as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARCH }}_bindgen.rs
        path: src/ffi/${{ env.ARCH }}_bindgen.rs
        
  commit-and-push:
    runs-on: ubuntu-latest
    needs: bindgen
    if: success() # Run only if the generate-bindgen job succeeds
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download generated files
        uses: actions/download-artifact@v4
        with:
          pattern: "*bindgen.rs"
          path: src/ffi
          merge-multiple: true
          
      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add src/ffi

          # Check if there are any changes to commit
          if git diff --quiet --exit-code --cached; then
            echo "No changes to commit."
          else
            git commit -m "chore: update vendored bindings"
            git push --force
          fi
